{% layout 'layout.liquid'%}
{% block content %}



<div class="mapContainer"> 
<div id="map" class="map"></div>
<div class='sidebar'>
    <div class='heading'>
      <h1>Find a Pharmacy</h1>
    </div>
    <div id='listings' class='listings'></div>
  </div>
  <!-- {% assign walgreensData = walgreensData%} -->
<script>
let features = '{{features}}'
console.log(features)
</script>
<script>
  mapboxgl.accessToken = 'pk.eyJ1Ijoic3RlcGhhbmllb255ZWthYmEiLCJhIjoiY2wwd3VpbjVjMHBoNDNmcDVleHJleDQwdCJ9.w6yzNkwWHFAwqUEMQn-Alg';
  // walgreensData = Object.entries(walgreensData) 

    // console.log("THE json", data.features[0].text )
		// 	console.log("THE json", data.features[0].place_name )
		// 	console.log("THE json", data.features[0].center[0] )



    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [ -80.44311572, 25.25717726],
        zoom: 9,
        scrollZoom: false
    });
  


    
// stores.features.forEach(function (store, i) {
//   store.properties.id = i;
// });
features.forEach(function (store, i) {
  store.properties.id = i;
});

map.on('load', () => {
    // buildLocationList(stores);
    buildLocationList(walgreensData);
  /* Add the data to your map as a layer */
  map.addLayer({
    id: 'locations',
    type: 'circle',
    /* Add a GeoJSON source containing place coordinates and information. */
    source: {
      type: 'geojson',
      // data: stores
      data: walgreensData
    }
  });
});
function buildLocationList(walgreensData) {
  for (const store of walgreensData.features) {
    
    /* Add a new listing section to the sidebar. */
    const listings = document.getElementById('listings');
    const listing = listings.appendChild(document.createElement('div'));
    /* Assign a unique `id` to the listing. */
    listing.id = `listing-${store.properties.id}`;
    /* Assign the `item` class to each listing for styling. */
    listing.className = 'item';
    /* Add the link to the individual listing created above. */
    const link = listing.appendChild(document.createElement('a'));
    link.href = '#';
    link.className = 'title';
    link.id = `link-${store.properties.id}`;
    link.innerHTML = `${store.properties.address}`;
    /* Add details to the individual listing. */
    const details = listing.appendChild(document.createElement('div'));
    details.innerHTML = `${store.properties.city}`;
    if (store.properties.phone) {
      details.innerHTML += ` Â· ${store.properties.phoneFormatted}`;
    }
    if (store.properties.distance) {
      const roundedDistance = Math.round(store.properties.distance * 100) / 100;
      details.innerHTML += `<div><strong>${roundedDistance} miles away</strong></div>`;
    }
    link.addEventListener('click', function () {
  for (const feature of walgreensData.features) {
    if (this.id === `link-${feature.properties.id}`) {
      flyToStore(feature);
      createPopUp(feature);
    }
  }
  const activeItem = document.getElementsByClassName('active');
  if (activeItem[0]) {
    activeItem[0].classList.remove('active');
  }
  this.parentNode.classList.add('active');
});
  }
}
function flyToStore(currentFeature) {
  map.flyTo({
    center: currentFeature.geometry.coordinates,
    zoom: 15
  });
}
function createPopUp(currentFeature) {
  const popUps = document.getElementsByClassName('mapboxgl-popup');
  /** Check if there is already a popup on the map and if so, remove it */
  if (popUps[0]) popUps[0].remove();
  const popup = new mapboxgl.Popup({ closeOnClick: false })
    .setLngLat(currentFeature.geometry.coordinates)
    .setHTML(`<h3>Walgreens</h3><h4>${currentFeature.properties.address}</h4>`)
    .addTo(map);
}
    </script>

</div>












  
    



  {% endblock %}














